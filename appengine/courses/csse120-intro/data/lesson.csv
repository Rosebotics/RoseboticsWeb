unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Introduction to Python,1,The Flipped Classroom,yes,Questions,https://github.com/csse120-201830/IntroductionToPython,rtDYAN-lShY,"<ul><li>Learn how this <em>flipped</em> class will work, and how it may be different from your other classes</li><li style='margin-left: 30px;'><b>In Class</b> - Exercises where you write code, asking questions as they come up</li><li style='margin-left: 30px;'><b>Out of class</b> - Watch videos and listen to the instructor (like you do <em>in class</em> for most of your other courses)</li><li><b><em>Watch this video NOW</em></b> and THEN (contrary to what the video says) press <em>Next Page</em> to see and answer the quiz questions.</li></ul>"
1,Introduction to Python,2,What is Software Engineering?,yes,Questions,https://github.com/csse120-201830/IntroductionToPython,BAvF-YAOoqQ,"<ul><li>We'd love for you all to become Software Engineers, it's pretty great, but let's talk more about what that means.</li></ul>"
1,Introduction to Python,3,m1e Comments Strings and print,yes,Questions,https://github.com/csse120-201830/IntroductionToPython,G84xslBEeFA,"<ul><li>Learn how to <em>print</em> (i.e., display) output on the screen.</li><li>We will use <em>PyCharm</em> with <em>Git</em> as our Integrated Development Environment (IDE). This video uses a different IDE (Eclipse with SVN), so some things in the video will look different than they will in PyCharm. In this video, <b><em>focus only on the code itself.</em></b></li></ul>"
1,Introduction to Python,4,m2 Hello world,yes,Questions,https://github.com/csse120-201830/IntroductionToPython,4wBA_rq3PwI,"<ul><li>Learn how the in-class exercises work.</li><li><em>Hello World</em> is a classic first programming exercise.</li><li>This video shows the very same exercise that you will do in-class in Session 1!</li><li>We will use <em>PyCharm</em> with <em>Git</em> as our Integrated Development Environment (IDE). This video uses a different IDE (Eclipse with SVN), so some things in the video will look a bit different than they will in PyCharm.  In particular, the video says to save your work in the cloud by using SVN, but we will use Git instead.  We will show you how to use Git in Session 1 (in-class).</li></ul>"
1,Introduction to Python,5,m3 SimpleTurtles,yes,Questions,https://github.com/csse120-201830/IntroductionToPython,NVp58Wvr-kw,"<ul><li><em>Turtle Graphics</em> is a classic and fun way to start learning how to write code.</li><li>This video introduces three key concepts of <em>Object Oriented Programming (OOP):</em></li><li style='margin-left: 30px;'><em>Constructing</em> an object (so that you can make it do things)</li><li style='margin-left: 30px;'>Using <em>methods</em> to make objects do things</li><li style='margin-left: 30px;'>Using <em>instance variables</em> to make an object hold (i.e., remember) information that it can use later</li><li>This video shows the very same exercise that you will do in-class in Session 1!</li><li>Later in Session 1, you'll apply its concepts to make something cool with Turtle graphics!</li></ul>"
1,Introduction to Python,6,m4e Loopy Turtles concept,,,https://github.com/csse120-201830/IntroductionToPython,VOK6AO8Pp-s,"<ul><li>This video introduces <em>loops</em> - making things happen over and over and over ...</li><li>Once again, it is an exercise that you will DO in Session 1, with ideas that you will APPLY later in Session 1.</li></ul>"
2,Objects Functions and Methods,1,Functions: Defining them and Calling them (flow of control),yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,ANMJaAOrIHs,"<ul><li>Note: This video refers to exercises that you will see in Session 2 (the video falsely claims that you will see them in Session 1).</li></ul>"
2,Objects Functions and Methods,2,Functions: Arguments, Parameters and Returned Values,yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,cWeaYTMQXEE,"<ul><li>The preceding video explained how a program's flow of control changes when a function call occurs.</li><li>This video explains the flow of information that occurs during a function call.</li></ul><img src='assets/img/four_step_function_process.png' alt='four steps of calling a function'>"
2,Objects Functions and Methods,3,Coding to a Specification,yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,y9JSDnRnyoA,"<ul><li>You will apply the ideas of this video in all subsequent exercises in this class (and beyond).</li></ul>"
2,Objects Functions and Methods,4,Object Oriented Programming,yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,uZEhumLGhzs,"<ul><li>This video explains the concept of Object Oriented Programming, contrasting it with Procedural Programming.</li></ul>"
2,Objects Functions and Methods,5,UML Class Diagrams,yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,PpER4ObybBI,"<ul><li>The previous video introduced the concept of Object Oriented Programming (OOP).</li><li>This video explains the programming constructs that embody OOP â€” classes, objects, instance variables and methods.</li></ul>"
2,Objects Functions and Methods,6,Using Objects,yes,Questions,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,ZpvzmheXD50,"<ul><li>This video extends the concepts from the previous videos to show how a software developer uses objects to be more productive.</li></ul>"
2,Objects Functions and Methods,7,Functions: Flow of Control,,,https://github.com/csse120-201830/ObjectsFunctionsAndMethods,605QWg-3t_U,"<ul><li>This video is optional.  Here is the code for this video:</li></ul><script src='https://gist.github.com/fisherds/b08f0118952cd84110e4fb80f68efabf.js'></script>"
3,Accumulators and Functions with Parameters,1,Reading: Functions with Parameters,yes,Questions,https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters,DJF8QXrTqXE,"<ul><li>Start this unit by making a <b>fork</b> of the <a target='_blank' href='https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters'>starting code from here</a> and setting up a PyCharm project</li><li>Read this explanation of <a target='_blank' href='assets/pdf/FunctionsWithParameters.pdf'>Functions with Parameters</a> (clicking the link will open a pdf in a new tab)</li><li>Read this important explanation carefully!</li><li>It reinforces what you saw previously in a video on functions.</li><li>Once you are done reading that document, close that tab, return to this page, and click Next Page below.</li></ul>"
3,Accumulators and Functions with Parameters,2,Reading: Namespaces and Variables' Scope,,,https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters,DJF8QXrTqXE,"<ul><li>Read this handout on <a target='_blank' href='assets/pdf/NamespacesAndVariablesScope.pdf'>Namespaces and Variables' Scope</a> (clicking the link will open a pdf in a new tab)</li><li>Don't worry if some of its ideas are confusing to you. The NEXT item (a video) should clear up your confusion.</li><li>Once you are done reading that document, close that tab, return to this page, and click Next Page below.</li></ul>"
3,Accumulators and Functions with Parameters,3,Namespaces Parameters Returns,yes,Questions,https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters,b8ZSQQX3CO0,"<ul><li>The contents of this video are critical to your success in this course. Be sure that all of this video is crystal clear to you, and if not, ** BRING YOUR QUESTIONS ABOUT IT TO CLASS. **</li></ul><script src='https://gist.github.com/fisherds/e13ffe32a59af37e550eeaeda1814681.js'></script>"
3,Accumulators and Functions with Parameters,4,Reading: Counted Loops,yes,Questions,https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters,DJF8QXrTqXE,"<ul><li>Read this explaination of <a target='_blank' href='assets/pdf/CountedLoops.pdf'>Counted Loops</a> (clicking the link will open a pdf in a new tab)</li><li>Read this important explanation carefully!</li><li>Study the examples in it.</li><li>Once you are done reading that document, close that tab, return to this page, and click Next Page below.</li></ul>"
3,Accumulators and Functions with Parameters,5,The Accumulator Pattern Summing,yes,Questions,https://github.com/csse120-201830/AccumulatorsAndFunctionsWithParameters,gQEgwylnzfU,"<ul><li>This is a common pattern that will help you not only in many exercises, but also in your coding career.</li></ul>"
4,The Accumulator Pattern,1,Conditionals: IF statements,yes,Questions,https://github.com/csse120-201830/TheAccumulatorPattern,DJF8QXrTqXE,"<ul><li>Start this unit by making a <b>fork</b> of the <a target='_blank' href='https://github.com/csse120-201830/TheAccumulatorPattern'>starting code from here</a> and setting up a PyCharm project</li><li>Read <a target='_blank' href='assets/pdf/Conditionals.pdf'>this explanation of conditionals</a> (clicking the link will open a pdf in a new tab)</li><li>Once you are done reading that document, close that tab, return to this page, and click Next Page below.</li></li></ul>The above PDF was constructed from portions of <strong><a href='http://openbookproject.net/thinkcs/python/english3e/conditionals.html'>Chapter 5. Conditionals</a></strong>, which itself is part of <a href='http://openbookproject.net/thinkcs/python/english3e/'> <em>How to Think Like a Computer Scientist: Learning with Python 3</em></a> by Peter Wentworth, Jeffrey Elkner, Allen B. Downey, and Chris Meyers. The book is a nice online resource, as are the other books from the <a href='http://www.openbookproject.net/'>Open Book Project</a>.</p>"
4,The Accumulator Pattern,2,The Accumulator Pattern Counting and Graphics,yes,Questions,https://github.com/csse120-201830/TheAccumulatorPattern,5AT9gv_BBUY,"<ul><li>This video extends the accumulator pattern from the summing pattern that you have seen previously to include the counting and in-graphics accumulator patterns.</li><li>The video uses a graphics system call Zellegraphics that preceded RoseGraphics, so you will see <b>zg</b> instead of <b>rg</b> and other such small changes from what we use now. The concepts are unchanged.</li></ul>"
4,The Accumulator Pattern,3,First Do a Concrete Example By Hand,yes,Questions,https://github.com/csse120-201830/TheAccumulatorPattern,B7x-bAq_EC8,"<ul><li>This video works through an example of a technique that you will use often.</li><li>Note: The video uses the following example: Given a line, draw a diamond from the line. The video should have said that the given line is the upper-left line of the diamond. (Instead, the video wrongly spoke of 'positive slope'.)</li></ul>"
4,The Accumulator Pattern,4,Unit Testing,yes,Questions,https://github.com/csse120-201830/TheAccumulatorPattern,DJF8QXrTqXE,"<span style='color:red'>Read this explanation </span> of <blockquote><strong>What is Unit Testing?</strong></blockquote><img src='assets/img/unit-testing.png' alt='Unit Testing'><br>taken from <a href='http://softwaretestingfundamentals.com/unit-testing/'>Unit Testing chapter</a> of <a href='http://softwaretestingfundamentals.com/'>Software Testing Fundamentals</a>.<br><br><br><span style='color:red'>Read this explanation </span> of <blockquote><strong>Why Do Unit Testing?</strong></blockquote><b>Question:</b><br><img src='assets/img/UnitTestingFromStackOverflow-1.jpg' alt='Why Unit Testing'><br><br><b>Answer:</b><br><img src='assets/img/UnitTestingFromStackOverflow-2.jpg' alt='Why Unit Testing'><br>taken from this <a href='http://stackoverflow.com/questions/1383/what-is-unit-testing/' target='_blank'>question on Stack Overflow</a>.<br><br>"
5,Debugging and Exam Prep,1,Good Debugging Practices,,,https://github.com/csse120-201830/Exam1Practice,xySRrPCpdWE,"<ul><li>This unit has 2 PyCharm projects.  1 is required and the other is optional extra practice on debugging</li><li style='margin-left: 30px;'><b>Required project</b> - Start this unit by making a <b>fork</b> of the <a target='_blank' href='https://github.com/csse120-201830/Exam1Practice'>starting code from here</a> and setting up a PyCharm project</li><li style='margin-left: 30px;'><b>Optional project</b> - After completing the modules above you can optionally get more debugging practice (which is good) by making a <b>fork</b> of this <a target='_blank' href='https://github.com/csse120-201830/Debugging'>optional second project</a> and setting up a PyCharm project for it</li><li>The first project will help prepare you for Exam 1, the second project will make you better at debugging.</li></ul><ul><li>Watch this video on Debugging: Good Practices to minimize the need for debugging.</li><li style='margin-left: 30px;'>For reference, here is a <a href='assets/pptx/GoodPractices.pptx'> PowerPoint slide version of the Good Practices video</a>.<span style='color:green'> If you want to see these slides, run this PowerPoint as a Slide Show, since it has animations.</span></li></ul>"
5,Debugging and Exam Prep,2,What to do when you get a runtime error?,,,https://github.com/csse120-201830/Exam1Practice,DJF8QXrTqXE,"<ul><li>Download and run, as a Slide Show, this PowerPoint presentation on <a href='assets/pptx/WhenYouGetARunTimeError.pptx'>Debugging: What to do when you get a run-time exception (error)</a>. Be sure to run this PowerPoint as a Slide Show, since it has animations.</li></ul>"
5,Debugging and Exam Prep,3,What to do when a test fails?,,,https://github.com/csse120-201830/Exam1Practice,DJF8QXrTqXE,"<ul><li>Download and run as a Slide Show this PowerPoint presentation on <a href='assets/pptx/WhenATestFails.pptx'>Debugging: What to do when a test fails</a>. Be sure to run this PowerPoint as a Slide Show, since it has animations.</li><li>This PowerPoint presentation uses an example that is well beyond what you have seen so far; no worries, just concentrate on the <em>debugging principles</em> that it demonstrates.</li></ul>"
5,Debugging and Exam Prep,4,Exam 1 Pencil and Paper Prep,,,https://github.com/csse120-201830/Exam1Practice,DJF8QXrTqXE,"<ul><li>Read this explanation of the <a target='_blank' href='https://docs.google.com/document/d/1gzAf0PQscJwefiw4CFL0lPiIGsrkhqOB6TCFA0pheEo/edit?usp=sharing'>Format of Test 1</a></li><li>Review this <a target='_blank' href='https://docs.google.com/document/d/185lf-FGrgx76Rhfec-a7XdumtJT35m5WycYsO1JbJ9E/edit?usp=sharing'>Honesty Pledge</a> that you will complete and turn in at the end of the exam</li><li>In class we will also print for you a practice Paper and Pencil exam (half of your exam).  If you want to start early on the questions, here is the <a target='_blank' href='assets/pdf/Test1_PracticeForPaperAndPencilProblems.pdf'>Practice Problems pdf</a> that we will print for you.</li><li style='margin-left: 30px;'><span style='color:red'>AFTER</span> doing the above problems, check your answers to the problems via this <a href='assets/pdf/Test1_SOLUTION_PracticeForPaperAndPencilProblems.pdf'>Answer Key</a> to those problems.</li><li>Additionally you should work on preparing your 'hint sheet', as described in the <a target='_blank' href='https://docs.google.com/document/d/1gzAf0PQscJwefiw4CFL0lPiIGsrkhqOB6TCFA0pheEo/edit?usp=sharing'>Format of Test 1</a> that you can use for the Pencil and Paper part of the exam</li></ul>"
5,Debugging and Exam Prep,5,Exam 1 FAQ,,,https://github.com/csse120-201830/Exam1Practice,DJF8QXrTqXE,"<ul><li>During the tests, you are on your own for finding errors in your code.</li><li>We will not answer questions about your code.</li><li>However, we have collected some of the common questions that students have previously asked during Test 1.</li><li>Here are those <a target='_blank' href='assets/pdf/QuestionsStudentsFrequentlyAskOnTest1.pdf'>Questions that students frequently ask on Test 1 (AND their answers)</a>  (clicking the link will open a pdf in a new tab).</li></ul>"
5,Debugging and Exam Prep,6,Live Coding problem0,,,https://github.com/csse120-201830/Exam1Practice,z7Qq545yGN0,"<ul><li>To help you get started on the computer part of the practice exam, open problem0 in your Exam 1 Practice modules in PyCharm (which you forked from <a target='_blank' href='https://github.com/csse120-201830/Exam1Practice'>here</a> back in video #1) and work problem0.py as you watch this video</li></ul>"
